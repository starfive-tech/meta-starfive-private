From d21645695ea772387ffeb96289de2aa931f1eb2b Mon Sep 17 00:00:00 2001
From: Eric Tang <eric.tang@starfivetech.com>
Date: Fri, 22 Dec 2023 17:00:42 +0800
Subject: [PATCH 3/8] Add an optional for optimizing Insert Read/Write CSR pass

Signed-off-by: Eric Tang <eric.tang@starfivetech.com>
---
 llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp b/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp
index 4b26c27bb4f8..3981747c00cb 100644
--- a/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp
+++ b/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp
@@ -22,6 +22,10 @@ using namespace llvm;
 #define DEBUG_TYPE "riscv-insert-read-write-csr"
 #define RISCV_INSERT_READ_WRITE_CSR_NAME "RISC-V Insert Read/Write CSR Pass"
 
+static cl::opt<bool> EnableInsertCSROpt(
+    "riscv-enable-insert-read-write-csr-opt", cl::init(false), cl::Hidden,
+    cl::desc("enable insert Read/Write CSR when inserting CSR."));
+
 namespace {
 
 class RISCVInsertReadWriteCSR : public MachineFunctionPass {
@@ -53,6 +57,8 @@ private:
 
 char RISCVInsertReadWriteCSR::ID = 0;
 
+static unsigned PreVXRMValue = 4;
+
 INITIALIZE_PASS(RISCVInsertReadWriteCSR, DEBUG_TYPE,
                 RISCV_INSERT_READ_WRITE_CSR_NAME, false, false)
 
@@ -80,6 +86,13 @@ bool RISCVInsertReadWriteCSR::emitWriteRoundingMode(MachineBasicBlock &MBB) {
       if (RISCVII::usesVXRM(MI.getDesc().TSFlags)) {
         unsigned VXRMImm = MI.getOperand(*RoundModeIdx).getImm();
 
+        if (EnableInsertCSROpt) {
+          if (VXRMImm == PreVXRMValue)
+            continue;
+
+          PreVXRMValue = VXRMImm;
+        }
+
         Changed = true;
 
         BuildMI(MBB, MI, MI.getDebugLoc(), TII->get(RISCV::WriteVXRMImm))
-- 
2.25.1

